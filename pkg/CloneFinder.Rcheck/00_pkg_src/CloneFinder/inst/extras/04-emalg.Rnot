# assuming each cluster is a separate beta distribution, estimate parametera
# by the method of moments
params <- as.matrix(sapply(1:4, function(i) estBetaParams(phiv[km$cluster == i])))
params
# the middle two should be symmetric, so let's force it
# (could proabbaly have been msrter about this earlier)
psis <- (params[1,] / apply(params, 2, sum))[2:3]
psi1 <- mean(c(psis[2], 1-psis[1]))
psi2 <- 1 - psi1
c(psi1, psi2)

# Now we can get the first estimate of the latent-variable z-matrices
z1map <- c(0, 0, 1, 1) # first clone is the 75% one
z2map <- c(0, 1, 0, 1) # second clone is the 25% one
mkm <- matrix(km$cluster, ncol=5)
zed1 <- matrix(z1map[km$cluster], ncol=5)
zed2 <- matrix(z2map[km$cluster], ncol=5)
# And we have a re-estimated phi matrix
phiest <- psi1*zed1 + psi2*zed2

# how close was the old estimate to the truth?
summary(PhiMatrix - phipick)
hist(PhiMatrix - phipick, breaks=57)
mean(abs(PhiMatrix - phipick) > 0.05) # got almost 94% of them right

# How much did the estimate change?
summary(phipick - phiest)
hist(phipick - phiest, breaks=57)
mean(abs(phipick - phiest) > 0.05)

# how close is the new estimate to the truth?
summary(PhiMatrix - phiest)
hist(PhiMatrix - phiest, breaks=57)
image(PhiMatrix - phiest)
mean(abs(PhiMatrix - phiest) > 0.05) # got almost 99% of them right

mean(Z1 != zed1)
mean(Z2 != zed2)

# Get set up to perform EM algorithm to improve the estimates.
# Since psi ranges between 0 and 1, we are going to use a
# logistic transformation to work on the real line and avoid
# problems that might crop up near te boundary.
lp <- function(p) log(p/(1-p)) 
ea <- function(a) {
  temp <- exp(a)
  temp/(1+temp)
}

# Computes the NEGATIVE log-likelihood for some value of psi,
# assuming that we already have the z1 and z2 matrices.
# Note that the input is assumed to be given by
#      x = lp(psi)
myTarget <- function(x, z1, z2, data, tumor) {
  psi <- ea(x)
  phinew <- psi*z1 + (1-psi)*z2
  loglikes <- sum(tock <- sapply(1:nrow(phinew), function(i, phi) {
    sum(log(likely(data[i,], phi[i,], tumor, sigma0=0.25)))
  }, phi=phinew))
  - loglikes
}


# parameters that control the EM loop
currlike <- 0
lastlike <- -10^5
epsilon <- 100 # only small compared to thesize ofthe likelihood

while(abs(lastlike - currlike) > epsilon) {
# M-step: Given Z1 and Z2, use MLE to find optimal psi
  runner <- optimize(myTarget, c(-5,5), z1=zed1, z2=zed2, data=simdata, tumor=tumor)
  psi <- ea(runner$minimum)
  lastlike <- currlike
  currlike <- -runner$objective
  cat("Log likelihood: ", currlike, "\n", file=stderr())
# E-step: Given psi, get values for Z1 and Z2
  sigma0 <- 0.25
  holdme <- matrix(NA, ncol=25, nrow <- 1000) 
  # rows = segments. For columns,  need to consider 5*5 = 25 possible
  # assignments of pure compartments to segments.
  for (i in 1:5) {
    for (j in 1:5) {
      # given compartment assignments i and j, compute the weighted center
      xy <- psi*tumor@pureCenters[i,] + (1-psi)*tumor@pureCenters[j,]
      # then get the independent likelihoods
      dx <- dnorm(simdata$x, xy$x, sigma0/sqrt(tumor@markers))
      dy <- dnorm(simdata$y, xy$y, sigma0/sqrt(tumor@markers))
      # take the product, but use a log transform
      pp <- log(dx)+log(dy)
      holdme[, 5*(i-1) + j] <- pp
    }
  }
  # find the best assignments
  picker <- apply(holdme, 1, which.max)
  # next few lines have to back compute i and j from the column
  # number in 1..25.
  J <- picker %% 5
  J[J==0] <- 5
  I <- 1 + (picker - J)/5
  zed1 <- makeLatent(I)
  zed2 <- makeLatent(J)
  if (any(apply(zed1, 1, sum) != 1)) stop("bad zed1")
  if (any(apply(zed2, 1, sum) != 1)) stop("bad zed1")
}
