
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Test the simulation code.  Basically threwe functions,
> # Clone, Tunmor, and generateData
> 
> library(CloneFinder)
Warning message:
replacing previous import by 'combinat::rmultinomial' when loading 'CloneFinder' 
> set.seed(523476)  # for reproducible tests
> 
> ######### CLONE #########
> # The Clone function is the constructor for the class with
> # the same name. There are two options to test.
> 
> # 1. You can use rthe default weights, or specify them explicitly
> 
> # example: default weights = equal prevalences of compartments
> clone <- Clone(10000)
> clone@weights
[1] 0.2 0.2 0.2 0.2 0.2
> table(clone@segments)

   1    2    3    4    5 
1987 2001 1969 1984 2059 
> rm(clone)
> 
> # example: highly biased weights = prevalences of compartments
> wts <- rev(5^(1:5))
> wts <- wts/sum(wts)  # we reuse this in next test
> clone <- Clone(10000, wts)
> clone@weights
[1] 0.800256082 0.160051216 0.032010243 0.006402049 0.001280410
> table(clone@segments)

   1    2    3    4    5 
8030 1563  335   66    6 
> head(clone@segments)   # note that the names are autogenerated
Segment1 Segment2 Segment3 Segment4 Segment5 Segment6 
       2        1        1        1        2        1 
> rm(clone)
> 
> # 2. You can pass in segment names or (as above) use the defaults
> 
> clone <- Clone(500, wts, paste("S", 1:500, sep=''))
> head(clone@segments)
S1 S2 S3 S4 S5 S6 
 1  1  1  2  2  2 
> rm(clone)
> 
> # obvious things that might break -- these are wrapped in 'try'
> # calls so that R CMD check doesn't fail
> 
> # non-positive number of segments
> try( Clone(-1) )
Error in Clone(-1) : Number of segments must be positive.
> try( Clone(0) )
Error in Clone(0) : Number of segments must be positive.
> # bad weights
> try( Clone(100, NULL) )
Error in sample.int(length(x), size, replace, prob) : 
  incorrect number of probabilities
In addition: Warning message:
In is.na(weights) : is.na() applied to non-(list or vector) of type 'NULL'
> try( Clone(100, NA) )
Error in Clone(100, NA) : Missing weights.
> try( Clone(100, "x") )
Error in sum(weights) : invalid 'type' (character) of argument
> try( Clone(100, c(-1, 2, 3)) )
Error in Clone(100, c(-1, 2, 3)) : Negative weights.
> # bad segfment names
> try( Clone(500, wts, paste("S", 1:100, sep='')) )
Error in Clone(500, wts, paste("S", 1:100, sep = "")) : 
  Wrong number of segment names.
> try( Clone(100, wts, paste("S", 1:500, sep='')) )
Error in Clone(100, wts, paste("S", 1:500, sep = "")) : 
  Wrong number of segment names.
> 
> ######### Tumor #########
> # Note: In order to create a Tumor, you must have already created
> # a CompartmentModel.
> 
> # Use known compartment centers
> xy <- data.frame(x = c(.2, .7, .8, .1, .4),
+                  y = c(.2, .3, .5, .9, .7))
> # Just pass in the number of segments and simulate the markers-per-segment
> baseModel <- CompartmentModel(200, xy, 0.25)
> summary(baseModel@markers)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   26.0   412.5   822.0   921.8  1483.0  1996.0 
> 
> # example: tumor with two clones of unequal prevalence (0.75, 0.25)
> tumor <- Tumor(baseModel, c(3,1), wts)
> tumor@fraction
Clone1 Clone2 
  0.75   0.25 
> tumor@weights
Compartment1 Compartment2 Compartment3 Compartment4 Compartment5 
 0.800256082  0.160051216  0.032010243  0.006402049  0.001280410 
> 
> tdata <- tumor@data
> summary(tdata)
     Clone1         Clone2     
 Min.   :1.00   Min.   :1.000  
 1st Qu.:1.00   1st Qu.:1.000  
 Median :1.00   Median :1.000  
 Mean   :1.23   Mean   :1.245  
 3rd Qu.:1.00   3rd Qu.:1.000  
 Max.   :3.00   Max.   :4.000  
> table(A=tdata[,1], B=tdata[,2])
   B
A     1   2   3   4
  1 127  25   6   1
  2  29   6   1   0
  3   4   1   0   0
> 
> head(tumor@data)
         Clone1 Clone2
Segment1      2      1
Segment2      1      1
Segment3      1      3
Segment4      1      1
Segment5      1      1
Segment6      2      1
> head(tumor@compartments)
         Compartment1 Compartment2 Compartment3 Compartment4 Compartment5
Segment1         0.25         0.75         0.00            0            0
Segment2         1.00         0.00         0.00            0            0
Segment3         0.75         0.00         0.25            0            0
Segment4         1.00         0.00         0.00            0            0
Segment5         1.00         0.00         0.00            0            0
Segment6         0.25         0.75         0.00            0            0
> head(tumor@centers)
             x     y
Segment1 0.575 0.275
Segment2 0.200 0.200
Segment3 0.350 0.275
Segment4 0.200 0.200
Segment5 0.200 0.200
Segment6 0.575 0.275
> 
> rm(tumor, tdata)
> 
> # example: specifying segment lengths
> segs <- runif(300, 20, 3000)
> baseModel <- CompartmentModel(segs, xy, 0.25)
> summary(baseModel@markers)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  24.97  687.90 1384.00 1411.00 2152.00 2988.00 
> rm(segs)
> 
> tumor <- Tumor(baseModel, c(3,1), wts)
> tumor@fraction
Clone1 Clone2 
  0.75   0.25 
> tumor@weights
Compartment1 Compartment2 Compartment3 Compartment4 Compartment5 
 0.800256082  0.160051216  0.032010243  0.006402049  0.001280410 
> 
> tdata <- tumor@data
> summary(tdata)
     Clone1          Clone2     
 Min.   :1.000   Min.   :1.000  
 1st Qu.:1.000   1st Qu.:1.000  
 Median :1.000   Median :1.000  
 Mean   :1.217   Mean   :1.253  
 3rd Qu.:1.000   3rd Qu.:1.000  
 Max.   :5.000   Max.   :4.000  
> table(A=tdata[,1], B=tdata[,2])
   B
A     1   2   3   4
  1 198  41   6   3
  2  34   5   3   0
  3   5   3   0   0
  4   1   0   0   0
  5   1   0   0   0
> 
> head(tumor@data)
         Clone1 Clone2
Segment1      1      1
Segment2      1      1
Segment3      1      1
Segment4      1      1
Segment5      1      1
Segment6      2      1
> head(tumor@compartments)
         Compartment1 Compartment2 Compartment3 Compartment4 Compartment5
Segment1         1.00         0.00            0            0            0
Segment2         1.00         0.00            0            0            0
Segment3         1.00         0.00            0            0            0
Segment4         1.00         0.00            0            0            0
Segment5         1.00         0.00            0            0            0
Segment6         0.25         0.75            0            0            0
> head(tumor@centers)
             x     y
Segment1 0.200 0.200
Segment2 0.200 0.200
Segment3 0.200 0.200
Segment4 0.200 0.200
Segment5 0.200 0.200
Segment6 0.575 0.275
> 
> rm(baseModel, tdata, xy, wts)
> 
> # use the last example to generate data
> simdata <- generateData(tumor)
> 
> proc.time()
   user  system elapsed 
   0.18    0.03    0.25 
