# The idea is to define various sets of "peak-finders".
# But first we need to figure out reasonable inputs and outputs.
# Part of that definition also defines the inputs to the next step,
# which is an EM-algorithm to estimate psi's and Z's.
#
# As for inputs, the only thing it seems to depend on is the
# previous estimate of phi-vectors.  Just in case, however, we
# will pass in the entire 'CLoneFinder' object

setClass("PeakFinder", representation(FUN="function"))

findPeaks <- function(object, cf, nClones, ...) {
    # object is a memeber of the PeakFInder class
    # cf is a member of the CLoneFInder class
    # nClones is an integer; the number of clones we think exist
    object@FUN(cf, ...)
}

kMeansFinder <- function(cf, nClones, ...) {
    centers<-c(seq(0, 1, length=nClones + 2))
    km <- kmeans(cf@phiv, centers=centers)
    km$cluster
}

plot(phiv, col=km$cluster, pch=16)
table(km$cluster)


.densityPF <- function(cf, nClones, ...) {
    phiv <- as.vecotr(cf$phipick)
    denx <- density(phiv, bw="SJ")$x
    boole1 <- denx >= 0
    boole2 <- denx <= 1
    cutoff1 <- length(which(boole1 %in% FALSE))
    cutoff2 <- length(which(boole1 %in% FALSE))
  #ind<- which(boole %in% TRUE)
    den <- density(phiv, bw="SJ")$y
  #den<- density(phiv)$y[(cutoff1+1):(length(denx)-cutoff2-1)]
}



  plot(den)
  plot(density(phiv, bw="SJ"))


#
#Clustering section; various methods employed, select best one--------------
#"Elbow" test: indicates 2 clones.
library(vegan)
plot(phiv)
wss <- (nrow(phiv)-1)*sum(apply(phiv,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(phiv,
                                     centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
#return the optimal number of clones:
slopefun<-function(n){
  wss[n-1]-wss[n]
}
firstdiff<-sapply(2:length(wss), slopefun)
slopefun2<-function(n){
  firstdiff[n-1]-firstdiff[n]
}
nclusters<-sapply(2:length(firstdiff), slopefun2)
nclones<- which.max(nclusters)+1
nclones
#Try with different numbers of clones...
#Main issue: what if there is only one clone?

#End of clustering section--------------------------------------------------
